#include "paggingsettings.h"
#include <QDataStream>
#include <QBuffer>

PaggingSettings::PaggingSettings()
{

}
PaggingSettings::~PaggingSettings()
{

}

QString PaggingSettings::getElementType() const
{
    return QString("PaggingSettings");
}

QByteArray PaggingSettings::serializeData()
{
    QBuffer serializedData;
    serializedData.open(QBuffer::WriteOnly);

    QDataStream stream(&serializedData);
    stream << isUsedInConfiguration << generators << names << imsiRanges << mmeCodes << uePaggingIdentity << paggingSlapUris << bundlePagging;
    return serializedData.buffer();
}

void PaggingSettings::deserializeData(const QByteArray &rawData)
{
    QDataStream stream(rawData);
    stream >> isUsedInConfiguration >> generators >> names >> imsiRanges >> mmeCodes >> uePaggingIdentity >> paggingSlapUris >> bundlePagging;
}
QString PaggingSettings::ParseToScript()
{
    QString outputString;
    // HEADER
    outputString.append(" def Parameters.getPaggingGeneratorParameters()\n\
                        # Define and return default values\n");
    // GENERATE pagging
    outputString.append("  default = {}\n");
    outputString.append("  default[:generate_paggings] = ");
    if (isUsedInConfiguration){
        outputString.append("true");
    }
    else {
        outputString.append("false");
    }    outputString.append("\t\t\t\t\t# Set to true if pagging generators are used in the configuration.\n");
    // GENERATORS
    outputString.append("  default[:generators] = ");
    outputString.append(QString::number(generators));
    outputString.append("\t\t\t\t\t\t# Number of pagging generators\n");
    // pagging GENERATORS NAMES
    outputString.append("  default[:pagging_generator_names] = [");
    for (QString &name:names){
        outputString.append("\"");
        outputString.append(name);
        outputString.append("\"");
        if (name == names.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\t# Name of the pagging generators\n");
    // IMSI RANGES
    outputString.append("  default[:imsi_ranges] = [");
    for (QString &range:imsiRanges){
        outputString.append("\"");
        outputString.append(range);
        outputString.append("\"");
        if (range == imsiRanges.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\t# The IMSI range which paggings are generated by each generator.\n");
    outputString.append("\n  # The IP addresses must be available on the LTEsim server and reachable from the eNB CP interface\n");
    // MME CODES
    outputString.append("  default[:mme_codes] = [");
    if (mmeCodes.empty()){
        outputString.append("]");
    }
    else {
        for (QString &code:mmeCodes){
            outputString.append("\"");
            outputString.append(code);
            outputString.append("\"");
            if (code == mmeCodes.back()){
                outputString.append("]");
            }
            else {
                outputString.append(",");
            }
        }
    }
    outputString.append("  # Used to generate GUMMEI\n");
    // pagging IDENTITY
    outputString.append("  default[:ue_pagging_identity] = \"");
    outputString.append(uePaggingIdentity);
    outputString.append("\"");
    outputString.append(" # Can be IMSI or STMSI\n");
    // pagging S1AP URIS
    outputString.append("  default[:pagging_s1ap_uris] = [");
    for (QString &uri:paggingSlapUris){
        outputString.append("\"");
        outputString.append(uri);
        outputString.append("\"");
        if (uri == paggingSlapUris.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\n");
    // S1AP CHECKASN1 CONSTRAINS
    outputString.append("  default[:s1ap_checkASN1_constraints] = ");
    outputString.append(QString(s1apCheckAsn1Contrains));
    outputString.append("\t# Set constraint checks to true to get info of broken ASN.1 messages\n");
    // BUNDLE pagging
    outputString.append("  default[:bundle_pagging] = ");
    if (bundlePagging){
        outputString.append("true");
    }
    else {
        outputString.append("false");
    }
    outputString.append("  # Set constraint check to true to turn pagging bundle.\n");
    outputString.append("  # All JMX parameters can be listed with help :pagginggenerator in the ltesim_cli\n");
    outputString.append("  return default\n");
    outputString.append(" end\n\n");
    return outputString;
}
