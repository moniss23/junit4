#include "pagingsettings.h"
#include <QDataStream>
#include <QBuffer>

PagingSettings::PagingSettings()
{

}
PagingSettings::~PagingSettings()
{

}

QString PagingSettings::getElementType() const
{
    return QString("PagingSettings");
}

QByteArray PagingSettings::serializeData()
{
    QBuffer serializedData;
    serializedData.open(QBuffer::WriteOnly);

    QDataStream stream(&serializedData);
    stream << isUsedInConfiguration << generators << names << imsiRanges << mmeCodes << uePagingIdentity << pagingSlapUris << bundlePaging;
    return serializedData.buffer();
}

void PagingSettings::deserializeData(const QByteArray &rawData)
{
    QDataStream stream(rawData);
    stream >> isUsedInConfiguration >> generators >> names >> imsiRanges >> mmeCodes >> uePagingIdentity >> pagingSlapUris >> bundlePaging;
}
QString PagingSettings::ParseToScript()
{
    QString outputString;
    // HEADER
    outputString.append("\tdef Parameters.getPagingGeneratorParameters()\n\
                        # Define and return default values\n");
    // GENERATE PAGING
    outputString.append("\t\tdefault = {}\n");
    outputString.append("\t\tdefault[:generate_pagings] = ");
    if (isUsedInConfiguration){
        outputString.append("true");
    }
    else {
        outputString.append("false");
    }    outputString.append("\t\t\t\t\t# Set to true if paging generators are used in the configuration.\n");
    // GENERATORS
    outputString.append("\t\tdefault[:generators] = ");
    outputString.append(QString::number(generators));
    outputString.append("\t\t\t\t\t\t# Number of paging generators\n");
    // PAGING GENERATORS NAMES
    outputString.append("\t\tdefault[:paging_generator_names] = [");
    for (QString &name:names){
        outputString.append("\"");
        outputString.append(name);
        outputString.append("\"");
        if (name == names.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\t# Name of the paging generators\n");
    // IMSI RANGES
    outputString.append("\t\tdefault[:imsi_ranges] = [");
    for (QString &range:imsiRanges){
        outputString.append("\"");
        outputString.append(range);
        outputString.append("\"");
        if (range == imsiRanges.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\t# The IMSI range which pagings are generated by each generator.\n");
    outputString.append("\n\t\t# The IP addresses must be available on the LTEsim server and reachable from the eNB CP interface\n");
    // MME CODES
    outputString.append("\t\tdefault[:mme_codes] = [");
    if (mmeCodes.empty()){
        outputString.append("]");
    }
    else {
        for (QString &code:mmeCodes){
            outputString.append("\"");
            outputString.append(code);
            outputString.append("\"");
            if (code == mmeCodes.back()){
                outputString.append("]");
            }
            else {
                outputString.append(",");
            }
        }
    }
    outputString.append("\t\t# Used to generate GUMMEI\n");
    // PAGING IDENTITY
    outputString.append("\t\tdefault[:ue_paging_identity] = \"");
    outputString.append(uePagingIdentity);
    outputString.append("\"");
    outputString.append("\t# Can be IMSI or STMSI\n");
    // PAGING S1AP URIS
    outputString.append("\t\tdefault[:paging_s1ap_uris] = [");
    for (QString &uri:pagingSlapUris){
        outputString.append("\"");
        outputString.append(uri);
        outputString.append("\"");
        if (uri == pagingSlapUris.back()){
            outputString.append("]");
        }
        else {
            outputString.append(",");
        }
    }
    outputString.append("\n");
    // S1AP CHECKASN1 CONSTRAINS
    outputString.append("\t\tdefault[:s1ap_checkASN1_constraints] = ");
    //outputString.append(QString(s1apCheckAsn1Contrains));
    outputString.append("\t# Set constraint checks to true to get info of broken ASN.1 messages\n");
    // BUNDLE PAGING
    outputString.append("\t\tdefault[:bundle_paging] = ");
    if (bundlePaging){
        outputString.append("true");
    }
    else {
        outputString.append("false");
    }
    outputString.append("\t\t# Set constraint check to true to turn paging bundle.\n");
    outputString.append("\t\t# All JMX parameters can be listed with help :paginggenerator in the ltesim_cli\n");
    outputString.append("\t\treturn default\n");
    outputString.append("\tend\n\n");
    return outputString;
}
