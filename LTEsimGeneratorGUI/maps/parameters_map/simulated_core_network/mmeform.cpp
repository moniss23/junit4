#include "mmeform.h"
#include "ui_mmeform.h"
#include "maps/parameters_map/mapwindow.h"
#include "maps/parameters_map/mapwindowlarge.h"
extern MapWindow* map_w;
extern MapWindowLarge* map_wl;

MmeForm::MmeForm(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MmeForm)
{
    ui->setupUi(this);
    flagConfirmNewValue = true;
    this->setWindowTitle("MME settings");
   // this->setToolTip("ocb?");
    ui->lblMme_names->setToolTip("Name of the MME component e.g. \"mme1\"");
    this->ui->lblMme_tais->setToolTip("MME tracking area identity value e.g. \"62F2281200\"");
    this->ui->lblMmes->setToolTip("Number of MMEs (used in multiple MME configuration) ");
    this->ui->lblMme_s1ap_uris->setToolTip("The IP addresses must be available on the LTEsim server and reachable from the eNB CP interface e.g.\"sctp://127.0.0.1:36412\"");
    this->ui->lbl_Mme_s1ap_pluginFilterPath->setToolTip("Set the filter path e.g. \"/etc/alternatives/ltesim-root/ltesim/internal\"");
    this->ui->lbl_2->setToolTip("Number of paging generators");
    this->ui->lbl_3->setToolTip("Name of the paging generators e.g. \"pagings1\",\"pagings2\",\"pagings3\" ");
    this->ui->lbl_5->setToolTip("The IMSI range which pagings are generated by each generator e.g. \"100000+100\",\"200000+100\",\"300000+100\"");
    this->ui->lbl_7->setToolTip("Used to generate GUMMEI e.g. \"AA\", \"AB\", \"AC\"");
    this->ui->lbl_6->setToolTip("Can be IMSI or STMSI e.g. \"IMSI\"");
    this->ui->lbl_4->setToolTip("The IP addresses must be available on the LTEsim server and reachable from the eNB CP interface, e.g. \"sctp://127.0.1.1:36412\"");
    this->wasThereChanges=false;
}

void MmeForm::set_checkboxactive(bool check)
{
    checkboxactive=check;
}

bool MmeForm::get_checkboxactive()
{
    return  checkboxactive;
}

MmeForm::~MmeForm()
{
    delete ui;
}

void MmeForm::setParameters(Mme *mme)
{
    this->mme = mme;

    ui->tetMme_names->setText(mme->getMme_names().trimmed());
    ui->tetMme_tais->setText(mme->getMme_tais().trimmed());
    ui->tetMme_s1ap_uris->setText(mme->getMme_s1ap_uris().trimmed());
    ui->tetS1ap_pluginFilterPath->setText(mme->getS1ap_pluginFilterPath().trimmed());
    ui->tetMmes->setText(mme->getMmes());

    ui->tet_generators->setText(mme->getGenerators().trimmed());
    ui->tet_imsi_ranges->setText(mme->getImsi_ranges().trimmed());
    ui->tet_mme_codes->setText(mme->getMme_codes().trimmed());
    ui->tet_paging_generator_names->setText(mme->getPaging_generator_names().trimmed());
    ui->tet_paging_s1ap_uris->setText(mme->getPaging_s1ap_uris().trimmed());
    ui->tet_ue_paging_identity->setText(mme->getUe_paging_identity().trimmed());


    //---------- Check Flag ----------------------------------------------------------------
    ui->checkBox_bundle_paging->setChecked(mme->getBundle_paging());
    ui->checkBox_s1ap_checkASN1_constraints->setChecked(mme->getS1ap_checkASN1_constraints());
    ui->checkBox_generate_pagings->setChecked(mme->getGenerate_pagings());

    ui->gbMME->setEnabled(mme->getSimulate_core());
   // ui->gbPaging->setEnabled(mme->getSimulate_core());


    on_checkBox_generate_pagings_clicked();
}

void MmeForm::on_tetMme_names_returnPressed()
{
    if(flagConfirmNewValue && (ui->tetMme_names->text() != mme->getMme_names())){
        mme->setMme_names(ui->tetMme_names->text());
        wasThereChanges=true;
        msg.setText("Mme_names "+ mme->getMme_names());
        msg.exec();
    }else
    mme->setMme_names(ui->tetMme_names->text());
}

void MmeForm::on_tetMme_tais_returnPressed()
{
    if(flagConfirmNewValue && (ui->tetMme_tais->text()!= mme->getMme_tais())){
        mme->setMme_tais(ui->tetMme_tais->text());
        wasThereChanges=true;
        msg.setText("Mme_tais: "+ mme->getMme_tais());
        msg.exec();
    }else
     mme->setMme_tais(ui->tetMme_tais->text());
}

void MmeForm::on_tetMme_s1ap_uris_returnPressed()
{
     if(flagConfirmNewValue && (ui->tetMme_s1ap_uris->text()  != mme->getMme_s1ap_uris())){
         mme->setMme_s1ap_uris(ui->tetMme_s1ap_uris->text());
         wasThereChanges=true;
         msg.setText("Mme_s1ap_uris: "+ mme->getMme_s1ap_uris());
         msg.exec();
     }else
     mme->setMme_s1ap_uris(ui->tetMme_s1ap_uris->text());
}

void MmeForm::on_tetS1ap_pluginFilterPath_returnPressed()
{
     if(flagConfirmNewValue && (ui->tetS1ap_pluginFilterPath->text() != mme->getS1ap_pluginFilterPath())){
         mme->setS1ap_pluginFilterPath(ui->tetS1ap_pluginFilterPath->text());
         wasThereChanges=true;
         msg.setText("Slap_pluginFilterPath: " + mme->getS1ap_pluginFilterPath());
         msg.exec();
     }else
     mme->setS1ap_pluginFilterPath(ui->tetS1ap_pluginFilterPath->text());
}

void MmeForm::on_tetMmes_returnPressed()
{
    if(flagConfirmNewValue && (ui->tetMmes->text() != mme->getMmes())){
        mme->setMmes(ui->tetMmes->text());
        wasThereChanges=true;
        msg.setText("Slap_pluginFilterPath: " + mme->getMmes());
        msg.exec();
    }else
    mme->setMmes(ui->tetMmes->text());
}


void MmeForm::on_buttonBox_accepted()
{
    if(wasChangesBeforeAccept())
        setChanges();
    msg.setText(" Changes has been succesfully approved ");
    this->close();
    if(flagConfirmNewValue && wasThereChanges)
        msg.exec();
    wasThereChanges=false;
}

void MmeForm::saveAll()
{
        mme->setMme_names(ui->tetMme_names->text());
        mme->setMme_tais(ui->tetMme_tais->text());
        mme->setMme_s1ap_uris(ui->tetMme_s1ap_uris->text());
        mme->setS1ap_pluginFilterPath(ui->tetS1ap_pluginFilterPath->text());
        mme->setMmes(ui->tetMmes->text());

        mme->setGenerators(ui->tet_generators->text());
        mme->setImsi_ranges(ui->tet_imsi_ranges->text());
        mme->setMme_codes(ui->tet_mme_codes->text());
        mme->setPaging_generator_names(ui->tet_paging_generator_names->text());
        mme->setPaging_s1ap_uris(ui->tet_paging_s1ap_uris->text());
        mme->setUe_paging_identity(ui->tet_ue_paging_identity->text());

}

void MmeForm::on_buttonBox_rejected()
{
    if(wasChangesBeforeAccept())
    {
        msgBox.setWindowTitle("Warning");
        msgBox.setIcon(QMessageBox::Question);
        msgBox.setText(trUtf8(("File was changed")));
        msgBox.setInformativeText(trUtf8("Do you want to save changes?"));
        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);
        msgBox.setDefaultButton(QMessageBox::Save);

    int ret = msgBox.exec();

    switch (ret) {
      case QMessageBox::Save:
           setChanges();
           this->close();
         break;
      case QMessageBox::Discard:
            this->close();
         break;
      case QMessageBox::Cancel:
           msgBox.close();
         break;
      default://never ever
         break;
                }
    }else
    {
        this->close();
    }
    wasThereChanges=false;
}

void MmeForm::on_tet_generators_returnPressed()
{
    if(flagConfirmNewValue && (ui->tet_generators->text()!=mme->getGenerators())){
        mme->setGenerators(ui->tet_generators->text());
        wasThereChanges=true;
        msg.setText("Generators: " + mme->getGenerators());
        msg.exec();
    }else
      mme->setGenerators(ui->tet_generators->text());
}

void MmeForm::on_tet_paging_generator_names_returnPressed()
{
     if(flagConfirmNewValue && (ui->tet_paging_generator_names->text() != mme->getPaging_generator_names())){
          mme->setPaging_generator_names(ui->tet_paging_generator_names->text());
          wasThereChanges=true;
          msg.setText("Paging_generator_names: "+ mme->getPaging_generator_names());
          msg.exec();
     }else
     mme->setPaging_generator_names(ui->tet_paging_generator_names->text());
}

void MmeForm::on_tet_imsi_ranges_returnPressed()
{
   if(flagConfirmNewValue && (ui->tet_imsi_ranges->text() != mme->getImsi_ranges())){
       mme->setImsi_ranges(ui->tet_imsi_ranges->text());
       wasThereChanges=true;
       msg.setText("Imsi_ranges: "+ mme->getImsi_ranges());
       msg.exec();
   }else
    mme->setImsi_ranges(ui->tet_imsi_ranges->text());
}

void MmeForm::on_tet_mme_codes_returnPressed()
{
     if(flagConfirmNewValue && (ui->tet_mme_codes->text() != mme->getMme_codes())){
         mme->setMme_codes(ui->tet_mme_codes->text());
         wasThereChanges=true;
         msg.setText("Mme_codes: "+ mme->getMme_codes());
         msg.exec();
     }
    mme->setMme_codes(ui->tet_mme_codes->text());
}

void MmeForm::on_tet_ue_paging_identity_returnPressed()
{
      if(flagConfirmNewValue && (ui->tet_ue_paging_identity->text() != mme->getUe_paging_identity())){
           mme->setUe_paging_identity(ui->tet_ue_paging_identity->text());
           wasThereChanges=true;
           msg.setText("Ue_paging_identity: "+ mme->getUe_paging_identity());
           msg.exec();
      }else
    mme->setUe_paging_identity(ui->tet_ue_paging_identity->text());
}

void MmeForm::on_tet_paging_s1ap_uris_returnPressed()
{
    if(flagConfirmNewValue && (ui->tet_paging_s1ap_uris->text() != mme->getPaging_s1ap_uris())){
         mme->setPaging_s1ap_uris(ui->tet_paging_s1ap_uris->text());
         wasThereChanges=true;
         msg.setText("Paging_slap_uris: "+ mme->getPaging_s1ap_uris());
         msg.exec();
    }else
    mme->setPaging_s1ap_uris(ui->tet_paging_s1ap_uris->text());
}

void MmeForm::on_checkBox_generate_pagings_clicked()
{

    ui->pagings->setEnabled(ui->checkBox_generate_pagings->isChecked());
    mme->setGenerate_pagings(ui->checkBox_generate_pagings->isChecked());

}

void MmeForm::on_checkBox_s1ap_checkASN1_constraints_clicked()
{
    mme->setS1ap_checkASN1_constraints(ui->checkBox_s1ap_checkASN1_constraints->isChecked());
}

void MmeForm::on_checkBox_bundle_paging_clicked()
{
    mme->setBundle_paging(ui->checkBox_bundle_paging->isChecked());
}

void MmeForm::on_pbReset_clicked()
{   
    mme->resetParams();
    setParameters(mme);

    if (map_w != NULL)
        map_w->resetFlags();
    else if (map_wl != NULL)
        map_wl->resetFlags();

    this->wasThereChanges=false;
}

    bool MmeForm::wasChangesBeforeAccept()
    {
        if(ui->tetMme_names->text() != mme->getMme_names())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tetMme_tais->text()!= mme->getMme_tais())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tetMme_s1ap_uris->text()  != mme->getMme_s1ap_uris())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tetS1ap_pluginFilterPath->text() != mme->getS1ap_pluginFilterPath())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tetMmes->text() != mme->getMmes())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_generators->text()!=mme->getGenerators())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_paging_generator_names->text() != mme->getPaging_generator_names())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_imsi_ranges->text() != mme->getImsi_ranges())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_mme_codes->text() != mme->getMme_codes())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_ue_paging_identity->text() != mme->getUe_paging_identity())
        {
            wasThereChanges=true;
            return true;
        }else if(ui->tet_paging_s1ap_uris->text() != mme->getPaging_s1ap_uris())
        {
            wasThereChanges=true;
            return true;
        }else
        {
            return false;
        }
    }

    void MmeForm::setChanges()
    {
        if(ui->tetMme_names->text() != mme->getMme_names())
        {
            mme->setMme_names(ui->tetMme_names->text());
        }
        if(ui->tetMme_tais->text()!= mme->getMme_tais())
        {
             mme->setMme_tais(ui->tetMme_tais->text());
        }
        if(ui->tetMme_s1ap_uris->text()  != mme->getMme_s1ap_uris())
        {
             mme->setMme_s1ap_uris(ui->tetMme_s1ap_uris->text());
        }
        if(ui->tetS1ap_pluginFilterPath->text() != mme->getS1ap_pluginFilterPath())
        {
            mme->setS1ap_pluginFilterPath(ui->tetS1ap_pluginFilterPath->text());
        }
        if(ui->tetMmes->text() != mme->getMmes())
        {
            mme->setMmes(ui->tetMmes->text());
        }
        if(ui->tet_generators->text()!=mme->getGenerators())
        {
            mme->setGenerators(ui->tet_generators->text());
        }
        if(ui->tet_paging_generator_names->text() != mme->getPaging_generator_names())
        {
            mme->setPaging_generator_names(ui->tet_paging_generator_names->text());
        }
        if(ui->tet_imsi_ranges->text() != mme->getImsi_ranges())
        {
            mme->setImsi_ranges(ui->tet_imsi_ranges->text());
        }
        if(ui->tet_mme_codes->text() != mme->getMme_codes())
        {
            mme->setMme_codes(ui->tet_mme_codes->text());
        }
        if(ui->tet_ue_paging_identity->text() != mme->getUe_paging_identity())
        {
            mme->setUe_paging_identity(ui->tet_ue_paging_identity->text());
        }
        if(ui->tet_paging_s1ap_uris->text() != mme->getPaging_s1ap_uris())
        {
            mme->setPaging_s1ap_uris(ui->tet_paging_s1ap_uris->text());
        }
    }


