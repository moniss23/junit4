#include "paggingform.h"
#include "ui_paggingform.h"

PaggingForm::PaggingForm(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::PaggingForm)
{
    ui->setupUi(this);
    this->ui->lbl_2->setToolTip("Number of pagging generators");
    this->ui->lbl_3->setToolTip("Name of the pagging generators e.g. \"paggings1\",\"paggings2\",\"paggings3\" ");
    this->ui->lbl_5->setToolTip("The IMSI range which paggings are generated by each generator e.g. \"100000+100\",\"200000+100\",\"300000+100\"");
    this->ui->lbl_7->setToolTip("Used to generate GUMMEI e.g. \"AA\", \"AB\", \"AC\"");
    this->ui->lbl_6->setToolTip("Can be IMSI or STMSI e.g. \"IMSI\"");
    this->ui->lbl_4->setToolTip("The IP addresses must be available on the LTEsim server and reachable from the eNB CP interface, e.g. \"sctp://127.0.1.1:36412\"");
}



PaggingForm::~PaggingForm()
{
    delete ui;
}

void PaggingForm::loadAndSpawn(const PaggingSettings &paggingSettings, const QString &projectName, bool enable)
{
    this->paggingSettings = paggingSettings;
    this->projectName = projectName;
    this->setDefaultParameters();
    this->setReadOnly(enable);
    this->show();
}

void PaggingForm::setDefaultParameters()
{
    this->ui->tet_generators->setText(QString::number(paggingSettings.generators));
    QString paggingNames;
    for (QString name:paggingSettings.names) {
        paggingNames+=(name+",");
    }
    this->ui->tet_pagging_generator_names->setText(paggingNames);
    QString paggingRanges;
    for (QString range:paggingSettings.imsiRanges) {
        paggingRanges+=(range+",");
    }
    this->ui->tet_imsi_ranges->setText(paggingRanges);
    this->ui->tet_ue_pagging_identity->setText(paggingSettings.uePaggingIdentity);
    QString paggingUris;
    for (QString ur:paggingSettings.paggingSlapUris) {
        paggingUris+=(ur+",");
    }
    this->ui->tet_pagging_s1ap_uris->setText(paggingUris);

}

void PaggingForm::setChanges()
{
        paggingSettings.generators = this->ui->tet_generators->text().toInt();
        paggingSettings.names = this->ui->tet_pagging_generator_names->text().split(",");
        paggingSettings.imsiRanges = this->ui->tet_imsi_ranges->text().split(",");
        if (this->ui->tet_ue_pagging_identity->text() == "IMSI") {
            paggingSettings.uePaggingIdentity = "IMSI";
        }
        else if (this->ui->tet_ue_pagging_identity->text() == "STMSI") {
            paggingSettings.uePaggingIdentity = "STMSI";
        }
        paggingSettings.paggingSlapUris = this->ui->tet_pagging_s1ap_uris->text().split(",");
        emit updatePagging(paggingSettings,projectName);
}


void PaggingForm::on_RestoreButton_clicked()
{
    setDefaultParameters();
}

void PaggingForm::on_OkButton_clicked()
{
    setChanges();
    this->close();
}

void PaggingForm::on_CancelButton_clicked()
{
    this->close();
}
void PaggingForm::setReadOnly(bool value)
{
    this->ui->tet_generators->setReadOnly(value);
    this->ui->tet_imsi_ranges->setReadOnly(value);
    this->ui->tet_mme_codes->setReadOnly(value);
    this->ui->tet_pagging_generator_names->setReadOnly(value);
    this->ui->tet_pagging_s1ap_uris->setReadOnly(value);
    this->ui->tet_ue_pagging_identity->setReadOnly(value);
    this->ui->checkBox_bundle_pagging->setEnabled(!value);
    this->ui->checkBox_generate_paggings->setEnabled(!value);
    this->ui->checkBox_s1ap_checkASN1_constraints->setEnabled(!value);
}
